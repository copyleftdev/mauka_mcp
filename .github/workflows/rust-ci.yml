name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  RUSTDOCFLAGS: "-D warnings"
  MAX_LINE_LENGTH: 100

jobs:
  # Check code formatting
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Run clippy with pedantic settings
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: format
    steps:
      - uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - name: Clippy check
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets -- -W clippy::pedantic -D warnings

  # Run all tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: clippy
    steps:
      - uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

  # Generate and validate documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Check documentation
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --document-private-items
      - name: Check for missing documentation
        uses: actions-rs/cargo@v1
        with:
          command: rustdoc
          args: -- -D missing_docs

  # Run coverage analysis
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Run tarpaulin
        run: |
          cargo tarpaulin --out Xml --output-dir ./coverage
          echo "::warning::Coverage check - minimum 90% required"
          export COVERAGE=$(cargo tarpaulin --out Json | jq '.report.coverage')
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "::error::Coverage $COVERAGE% is less than required 90%"
            exit 1
          fi
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/cobertura.xml
          fail_ci_if_error: true

  # Verify unsafe code audit
  safety:
    name: Safety Audit
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Scan for unsafe code
        run: |
          if grep -r "unsafe" --include="*.rs" src/; then
            echo "::error::Unsafe code detected. Project rules require safe Rust."
            exit 1
          fi
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Check for security vulnerabilities
        run: cargo audit
